aes(x = MUNICIPIO, ymin = hdi_low, ymax = hdi_high, alpha = n_sites),
width = 0.2, color = "gray40"
) +
geom_point(
data = df_mun_filtrado,
aes(x = MUNICIPIO, y = mean_mun, size = hdi_width, fill = n_sites),
shape = 21, stroke = 0.5
) +
geom_point(
data = filter(final_df_filtrado, rank <= 20),
aes(x = MUNICIPIO, y = mean_site),
shape = 4, size = 3, color = "red"
) +
# Novidade: Texto repelido
geom_text_repel(
data = filter(final_df_filtrado, rank <= 20),
aes(x = MUNICIPIO, y = mean_site, label = ENDERECO_ID),
color = "red",
direction = "y",  # Direção prioritária do repel
nudge_y = 0.05,   # Deslocamento vertical inicial
segment.color = "red",
segment.size = 0.3,
size = 3,
max.overlaps = 20  # Permite mais overlaps controlados
) +
scale_fill_viridis_c("Nº de Sites", option = "viridis", breaks = seq(5, max(df_mun_filtrado$n_sites), 50)) +
scale_alpha_continuous("Nº de Sites", range = c(0.5, 1)) +
scale_size_continuous("Incerteza", range = c(2, 8)) +
labs(
x = "Municipality (≥30 sites)",
caption = "Red Crosses: Worst sites in each municipality",
title = "Average ECQ Success Rate by Municipality x Worst Sites",",
) +
coord_flip() +
theme_minimal()
# Passo 1: Filtrar municípios com 5+ sites
mun_5plus <- final_df %>%
group_by(MUNICIPIO) %>%
filter(n() >= 30) %>%  # Conta linhas (cada linha = 1 site)
ungroup() %>%
distinct(MUNICIPIO)  # Lista de municípios elegíveis
# Passo 2: Aplicar filtro aos dados
final_df_filtrado <- final_df %>%
semi_join(mun_5plus, by = "MUNICIPIO")
# Passo 1: Filtrar municípios com 5+ sites
mun_5plus <- final_df %>%
group_by(MUNICIPIO) %>%
filter(n() >= 30) %>%  # Conta linhas (cada linha = 1 site)
ungroup() %>%
distinct(MUNICIPIO)  # Lista de municípios elegíveis
# Passo 2: Aplicar filtro aos dados
final_df_filtrado <- final_df %>%
semi_join(mun_5plus, by = "MUNICIPIO")
df_mun_filtrado <- final_df_filtrado %>%
group_by(MUNICIPIO) %>%
summarise(
mean_mun = mean(mean_municipio),
hdi_low = mean(hdi_inf_Mun),
hdi_high = mean(hdi_sup_Mun),
n_sites = n(),  # Número real de sites
hdi_width = hdi_high - hdi_low
) %>%
ungroup() %>%
mutate(MUNICIPIO = fct_reorder(MUNICIPIO, mean_mun))
# Passo 3: Atualizar o plot
ggplot() +
geom_errorbar(
data = df_mun_filtrado,
aes(x = MUNICIPIO, ymin = hdi_low, ymax = hdi_high, alpha = n_sites),
width = 0.2, color = "gray40"
) +
geom_point(
data = df_mun_filtrado,
aes(x = MUNICIPIO, y = mean_mun, size = hdi_width, fill = n_sites),
shape = 21, stroke = 0.5
) +
geom_point(
data = filter(final_df_filtrado, rank <= 20),
aes(x = MUNICIPIO, y = mean_site),
shape = 4, size = 3, color = "red"
) +
# Novidade: Texto repelido
geom_text_repel(
data = filter(final_df_filtrado, rank <= 20),
aes(x = MUNICIPIO, y = mean_site, label = ENDERECO_ID),
color = "red",
direction = "y",  # Direção prioritária do repel
nudge_y = 0.05,   # Deslocamento vertical inicial
segment.color = "red",
segment.size = 0.3,
size = 3,
max.overlaps = 20  # Permite mais overlaps controlados
) +
scale_fill_viridis_c("Nº de Sites", option = "viridis", breaks = seq(5, max(df_mun_filtrado$n_sites), 50)) +
scale_alpha_continuous("Nº de Sites", range = c(0.5, 1)) +
scale_size_continuous("Incerteza", range = c(2, 8)) +
labs(
x = "Municipality (≥30 sites)",
caption = "Red Crosses: Worst sites in each municipality",
title = "Average ECQ Success Rate by Municipality x Worst Sites",
) +
coord_flip() +
theme_minimal()
# Passo 1: Filtrar municípios com 5+ sites
mun_5plus <- final_df %>%
group_by(MUNICIPIO) %>%
filter(n() >= 30) %>%  # Conta linhas (cada linha = 1 site)
ungroup() %>%
distinct(MUNICIPIO)  # Lista de municípios elegíveis
# Passo 2: Aplicar filtro aos dados
final_df_filtrado <- final_df %>%
semi_join(mun_5plus, by = "MUNICIPIO")
df_mun_filtrado <- final_df_filtrado %>%
group_by(MUNICIPIO) %>%
summarise(
mean_mun = mean(mean_municipio),
hdi_low = mean(hdi_inf_Mun),
hdi_high = mean(hdi_sup_Mun),
n_sites = n(),  # Número real de sites
hdi_width = hdi_high - hdi_low
) %>%
ungroup() %>%
mutate(MUNICIPIO = fct_reorder(MUNICIPIO, mean_mun))
# Passo 3: Atualizar o plot
ggplot() +
geom_errorbar(
data = df_mun_filtrado,
aes(x = MUNICIPIO, ymin = hdi_low, ymax = hdi_high, alpha = n_sites),
width = 0.2, color = "gray40"
) +
geom_point(
data = df_mun_filtrado,
aes(x = MUNICIPIO, y = mean_mun, size = hdi_width, fill = n_sites),
shape = 21, stroke = 0.5
) +
geom_point(
data = filter(final_df_filtrado, rank <= 20),
aes(x = MUNICIPIO, y = mean_site),
shape = 4, size = 3, color = "red"
) +
# Novidade: Texto repelido
geom_text_repel(
data = filter(final_df_filtrado, rank <= 20),
aes(x = MUNICIPIO, y = mean_site, label = ENDERECO_ID),
color = "red",
direction = "y",  # Direção prioritária do repel
nudge_y = 0.05,   # Deslocamento vertical inicial
segment.color = "red",
segment.size = 0.3,
size = 3,
max.overlaps = 20  # Permite mais overlaps controlados
) +
scale_fill_viridis_c("Nº Sites", option = "viridis", breaks = seq(5, max(df_mun_filtrado$n_sites), 50)) +
scale_alpha_continuous("Nº Sites", range = c(0.5, 1)) +
scale_size_continuous("Uncertainty", range = c(2, 8)) +
labs(
x = "Municipality (≥30 sites)",
caption = "Red Crosses: Worst sites in each municipality",
title = "Average ECQ Success Rate by Municipality x Worst Sites",
) +
coord_flip() +
theme_minimal()
glimpse(final_df)
head(final_df)
library(ggplot2)
library(ggrepel)
library(dplyr)
data_amostrada <- data %>%
slice_sample(prop = 0.5)  # ou sample_n(100) para 100 pontos fixos
ggplot(data_amostrada, aes(
x = TESTES_ECQ,
y = TESTES_ECQ_OK / TESTES_ECQ,
label = ENDERECO_ID
)) +
geom_point(size = 2, alpha = 0.7) +
geom_text_repel(
size = 3,
max.overlaps = 5
) +
scale_y_continuous(labels = scales::percent_format(1)) +
labs(
title = "ECQ Tests vs. Success Rate (Random Sample)",
x = "Number of ECQ Tests",
y = "Success Rate (ECQ_OK / ECQ)",
caption = "Points represent a random sample of network sites (ENDERECO_ID)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(face = "bold")
)
####
# Gráficos agregados
plot_grid(
traceplot(samples[,c("mu_anf", "sigma_global")], ncol = 1),
densplot(samples[,sample(grep("mu_municipio", varnames(samples)), 9)]),
ncol = 2
)
library(ggplot2)
library(ggrepel)
library(dplyr)
data_amostrada <- data %>%
slice_sample(prop = 0.5)  # ou sample_n(100) para 100 pontos fixos
ggplot(data_amostrada, aes(
x = TESTES_ECQ,
y = TESTES_ECQ_OK / TESTES_ECQ,
label = ENDERECO_ID
)) +
geom_point(size = 2, alpha = 0.7) +
geom_text_repel(
size = 3,
max.overlaps = 5
) +
scale_y_continuous(labels = scales::percent_format(1)) +
labs(
title = "ECQ Tests vs. Success Rate (Random Sample)",
x = "Number of ECQ Tests",
y = "Success Rate (ECQ_OK / ECQ)",
caption = "Points represent a random sample of network sites (ENDERECO_ID)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(face = "bold")
)
####
# Gráficos agregados
plot_grid(
traceplot(samples[,c("mu_anf", "sigma_global")], ncol = 1),
densplot(samples[,sample(grep("mu_municipio", varnames(samples)), 9)]),
ncol = 2
)
head(final_df)
head(final_df)
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
library(dplyr)
# Format numeric columns & translate headers
pretty_head <- final_df %>%
head() %>%
mutate(
across(c(hdi_inf, mean_site, hdi_sup, hdi_inf_Mun, mean_municipio, hdi_sup_Mun, impacto),
~ round(., 3)),
rank = as.integer(rank)
) %>%
rename(
Município = MUNICIPIO,
Site = ENDERECO_ID,
`HDI Inf.` = hdi_inf,
`Média Site` = mean_site,
`HDI Sup.` = hdi_sup,
`HDI Mun. Inf.` = hdi_inf_Mun,
`Média Município` = mean_municipio,
`HDI Mun. Sup.` = hdi_sup_Mun,
Testes = TESTES_ECQ,
Sucessos = TESTES_ECQ_OK,
Falhas = FALHAS_ECQ,
Impacto = impacto,
Prioridade = rank
)
# Create formatted table
pretty_head %>%
kable(
align = c("l", "l", "l", rep("c", 11)),
caption = "Amostra de Sites Prioritários (Top 6)"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 12
) %>%
column_spec(4:7, background = "#f7f7f7") %>%  # Highlight HDI columns
column_spec(12, color = "white", background = "#d7191c") %>%  # Priority
row_spec(0, bold = TRUE, background = "#005b96", color = "white") %>%  # Header
add_header_above(c(" " = 3, "Site" = 3, "Município" = 3, "Testes" = 3, " " = 2))
library(kableExtra)
library(dplyr)
# Format numeric columns & translate headers
pretty_head <- final_df %>%
head(20) %>%
mutate(
across(c(hdi_inf, mean_site, hdi_sup, hdi_inf_Mun, mean_municipio, hdi_sup_Mun, impacto),
~ round(., 3)),
rank = as.integer(rank)
) %>%
rename(
Município = MUNICIPIO,
Site = ENDERECO_ID,
`HDI Inf.` = hdi_inf,
`Média Site` = mean_site,
`HDI Sup.` = hdi_sup,
`HDI Mun. Inf.` = hdi_inf_Mun,
`Média Município` = mean_municipio,
`HDI Mun. Sup.` = hdi_sup_Mun,
Testes = TESTES_ECQ,
Sucessos = TESTES_ECQ_OK,
Falhas = FALHAS_ECQ,
Impacto = impacto,
Prioridade = rank
)
# Create formatted table
pretty_head %>%
kable(
align = c("l", "l", "l", rep("c", 11)),
caption = "Amostra de Sites Prioritários (Top 6)"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 12
) %>%
column_spec(4:7, background = "#f7f7f7") %>%  # Highlight HDI columns
column_spec(12, color = "white", background = "#d7191c") %>%  # Priority
row_spec(0, bold = TRUE, background = "#005b96", color = "white") %>%  # Header
add_header_above(c(" " = 3, "Site" = 3, "Município" = 3, "Testes" = 3, " " = 2))
df_final%>% arrange(impacto)
to)
df_final%>% arrange(impacto)
df_final
final_df%>% arrange(impacto)
final_df%>% arrange(impacto)
final_df%>% arrange(impacto)
final_df%>% arrange(desc(impacto)
final_df%>% arrange(desc(impacto))
final_df%>% arrange(desc(impacto))
final_df <- final_df%>% arrange(desc(impacto))
final_df <- final_df%>% arrange(desc(impacto))
# Format numeric columns & translate headers
pretty_head <- final_df %>%
head(20) %>%
mutate(
across(c(hdi_inf, mean_site, hdi_sup, hdi_inf_Mun, mean_municipio, hdi_sup_Mun, impacto),
~ round(., 3)),
rank = as.integer(rank)
) %>%
rename(
Município = MUNICIPIO,
Site = ENDERECO_ID,
`HDI Inf.` = hdi_inf,
`Média Site` = mean_site,
`HDI Sup.` = hdi_sup,
`HDI Mun. Inf.` = hdi_inf_Mun,
`Média Município` = mean_municipio,
`HDI Mun. Sup.` = hdi_sup_Mun,
Testes = TESTES_ECQ,
Sucessos = TESTES_ECQ_OK,
Falhas = FALHAS_ECQ,
Impacto = impacto,
Prioridade = rank
)
# Create formatted table
pretty_head %>%
kable(
align = c("l", "l", "l", rep("c", 11)),
caption = "Amostra de Sites Prioritários (Top 6)"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 12
) %>%
column_spec(4:7, background = "#f7f7f7") %>%  # Highlight HDI columns
column_spec(12, color = "white", background = "#d7191c") %>%  # Priority
row_spec(0, bold = TRUE, background = "#005b96", color = "white") %>%  # Header
add_header_above(c(" " = 3, "Site" = 3, "Município" = 3, "Testes" = 3, " " = 2))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(dplyr)
final_df <- final_df%>% arrange(desc(impacto))
# Format numeric columns & translate headers
pretty_head <- final_df %>%
head(10) %>%
mutate(
across(c(hdi_inf, mean_site, hdi_sup, hdi_inf_Mun, mean_municipio, hdi_sup_Mun, impacto),
~ round(., 3)),
rank = as.integer(rank)
) %>%
rename(
Município = MUNICIPIO,
Site = ENDERECO_ID,
`HDI Inf.` = hdi_inf,
`Média Site` = mean_site,
`HDI Sup.` = hdi_sup,
`HDI Mun. Inf.` = hdi_inf_Mun,
`Média Município` = mean_municipio,
`HDI Mun. Sup.` = hdi_sup_Mun,
Testes = TESTES_ECQ,
Sucessos = TESTES_ECQ_OK,
Falhas = FALHAS_ECQ,
Impacto = impacto,
Prioridade = rank
)
# Create formatted table
pretty_head %>%
kable(
align = c("l", "l", "l", rep("c", 11)),
caption = "Amostra de Sites Prioritários (Top 6)"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 12
) %>%
column_spec(4:7, background = "#f7f7f7") %>%  # Highlight HDI columns
column_spec(12, color = "white", background = "#d7191c") %>%  # Priority
row_spec(0, bold = TRUE, background = "#005b96", color = "white") %>%  # Header
add_header_above(c(" " = 3, "Site" = 3, "Município" = 3, "Testes" = 3, " " = 2))
# Script para reinstalar TinyTeX com TeX Live 2025 e instalar multirow.sty
# Carrega o pacote tinytex
if (!requireNamespace("tinytex", quietly = TRUE)) {
install.packages("tinytex")
}
library(tinytex)
# Passo 1: Desinstala o TinyTeX atual
cat("Desinstalando TinyTeX anterior (se houver)...\n")
tinytex::uninstall_tinytex(force = TRUE)
# Passo 2: Reinstala TinyTeX com TeX Live 2025
cat("Instalando nova versão do TinyTeX...\n")
tinytex::install_tinytex(repository = "illinois")
# Passo 3: Instala o pacote LaTeX necessário (multirow)
cat("Instalando o pacote 'multirow'...\n")
tinytex::tlmgr_install("multirow")
# Passo 4: Atualiza todos os pacotes do TeX Live
cat("Atualizando todos os pacotes do TeX Live...\n")
tinytex::tlmgr_update()
cat("✅ TinyTeX reinstalado com sucesso e 'multirow' instalado.\n")
library(kableExtra)
library(dplyr)
final_df <- final_df%>% arrange(desc(impacto))
# Format numeric columns & translate headers
pretty_head <- final_df %>%
head(10) %>%
mutate(
across(c(hdi_inf, mean_site, hdi_sup, hdi_inf_Mun, mean_municipio, hdi_sup_Mun, impacto),
~ round(., 3)),
rank = as.integer(rank)
) %>%
rename(
Município = MUNICIPIO,
Site = ENDERECO_ID,
`HDI Inf.` = hdi_inf,
`Média Site` = mean_site,
`HDI Sup.` = hdi_sup,
`HDI Mun. Inf.` = hdi_inf_Mun,
`Média Município` = mean_municipio,
`HDI Mun. Sup.` = hdi_sup_Mun,
Testes = TESTES_ECQ,
Sucessos = TESTES_ECQ_OK,
Falhas = FALHAS_ECQ,
Impacto = impacto,
Prioridade = rank
)
# Create formatted table
pretty_head %>%
kable(
align = c("l", "l", "l", rep("c", 11)),
caption = "Amostra de Sites Prioritários (Top 6)"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 7,
scale_down = TRUE  # <--- esta linha resolve
) %>%
column_spec(4:7, background = "#f7f7f7") %>%  # Highlight HDI columns
column_spec(12, color = "white", background = "#d7191c") %>%  # Priority
row_spec(0, bold = TRUE, background = "#005b96", color = "white") %>%  # Header
add_header_above(c(" " = 3, "Site" = 3, "Município" = 3, "Testes" = 3, " " = 2))
library(kableExtra)
library(dplyr)
final_df <- final_df%>% arrange(desc(impacto))
# Format numeric columns & translate headers
pretty_head <- final_df %>%
head(10) %>%
mutate(
across(c(hdi_inf, mean_site, hdi_sup, hdi_inf_Mun, mean_municipio, hdi_sup_Mun, impacto),
~ round(., 3)),
rank = as.integer(rank)
) %>%
rename(
Município = MUNICIPIO,
Site = ENDERECO_ID,
`HDI Inf.` = hdi_inf,
`Média Site` = mean_site,
`HDI Sup.` = hdi_sup,
`HDI Mun. Inf.` = hdi_inf_Mun,
`Média Município` = mean_municipio,
`HDI Mun. Sup.` = hdi_sup_Mun,
Testes = TESTES_ECQ,
Sucessos = TESTES_ECQ_OK,
Falhas = FALHAS_ECQ,
Impacto = impacto,
Prioridade = rank
)
# Create formatted table
pretty_head %>%
kable(
align = c("l", "l", "l", rep("c", 11)),
caption = "Amostra de Sites Prioritários (Top 6)"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 7,
#   scale_down = TRUE  # <--- esta linha resolve
) %>%
column_spec(4:7, background = "#f7f7f7") %>%  # Highlight HDI columns
column_spec(12, color = "white", background = "#d7191c") %>%  # Priority
row_spec(0, bold = TRUE, background = "#005b96", color = "white") %>%  # Header
add_header_above(c(" " = 3, "Site" = 3, "Município" = 3, "Testes" = 3, " " = 2))
end_time <- Sys.time()
