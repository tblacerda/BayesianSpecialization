setwd("~/Documentos/COURSERA_BAYES_ESPECIALIZATION/Course 2 - Tecniques and models/_Module4/Honors")
library(tidyverse)
library(jags)
library(rjags)
dat = read.csv("mixture.csv", header = FALSE)
head(dat)
y = dat$V1
hist(y)
plot(density(y))
mod_string = "model {
for i in 1:length((y)) {
y[i] ~ dnorm(mu[z[i]], prec)
z[i] ~ dcat(omega)
}
mu[1] ~ dnorm(-1, 1/100)
mu[2] ~ dnorm (1 , 1/100) T(mu[1])
prec ~ dgamma(1/2,  1/2)
sig ~ sqrt(1/prec)
omega ~ ddirch(c(1,1))
}"
set.seed(11)
data_jags = list(y)
params = c("mu", "sig", "omega", "z[1]", "z[31]", "z[49]", "z[6]")
mod <- jags.model(textConnection(mod_string),
data = data_jags,
n.chains = 3,
n.adapt = 1000,
)
mod_string = model "{
for (i in 1:length(y)) {
y[i] ~ dnorm(mu[z[i]], prec)
z[i] ~ dcat(omega)
}
mu[1] ~ dnorm(-1, 1/100)
mu[2] ~ dnorm (1 , 1/100) T(mu[1])
prec ~ dgamma(1/2,  1/2)
sig ~ sqrt(1/prec)
omega ~ ddirch(c(1,1))
}"
mod_string =" model {
for (i in 1:length(y)) {
y[i] ~ dnorm(mu[z[i]], prec)
z[i] ~ dcat(omega)
}
mu[1] ~ dnorm(-1, 1/100)
mu[2] ~ dnorm (1 , 1/100) T(mu[1])
prec ~ dgamma(1/2,  1/2)
sig ~ sqrt(1/prec)
omega ~ ddirch(c(1,1))
}"
set.seed(11)
data_jags = list(y)
params = c("mu", "sig", "omega", "z[1]", "z[31]", "z[49]", "z[6]")
mod <- jags.model(textConnection(mod_string),
data = data_jags,
n.chains = 3,
n.adapt = 1000,
)
mod_string =" model {
for (i in 1:length(y)) {
y[i] ~ dnorm(mu[z[i]], prec)
z[i] ~ dcat(omega)
}
mu[1] ~ dnorm(-1, 1/100)
mu[2] ~ dnorm (1 , 1/100) T(mu[1],)
prec ~ dgamma(1/2,  1/2)
sig ~ sqrt(1/prec)
omega ~ ddirch(c(1,1))
}"
set.seed(11)
data_jags = list(y)
params = c("mu", "sig", "omega", "z[1]", "z[31]", "z[49]", "z[6]")
mod <- jags.model(textConnection(mod_string),
data = data_jags,
n.chains = 3,
n.adapt = 1000,
)
head(dat)
y = dat$V1
hist(y)
plot(density(y))
mod_string =" model {
for (i in 1:length(y)) {
y[i] ~ dnorm(mu[z[i]], prec)
z[i] ~ dcat(omega)
}
mu[1] ~ dnorm(-1, 1/100)
mu[2] ~ dnorm (1 , 1/100) T(mu[1],)
prec ~ dgamma(1/2,  1/2)
sig ~ sqrt(1/prec)
omega ~ ddirch(c(1,1))
}"
set.seed(11)
data_jags = list(y=y)
params = c("mu", "sig", "omega", "z[1]", "z[31]", "z[49]", "z[6]")
mod <- jags.model(textConnection(mod_string),
data = data_jags,
n.chains = 3,
n.adapt = 1000,
)
mod_string =" model {
for (i in 1:length(y)) {
y[i] ~ dnorm(mu[z[i]], prec)
z[i] ~ dcat(omega)
}
mu[1] ~ dnorm(-1, 1/100)
mu[2] ~ dnorm (1 , 1/100) T(mu[1],)
prec ~ dgamma(1/2,  1/2)
sig = sqrt(1.0/prec)
omega ~ ddirch(c(1,1))
}"
set.seed(11)
data_jags = list(y=y)
params = c("mu", "sig", "omega", "z[1]", "z[31]", "z[49]", "z[6]")
mod <- jags.model(textConnection(mod_string),
data = data_jags,
n.chains = 3,
n.adapt = 1000,
)
update(mod, 1000)
mod_sim <- coda.samples(model = mod,
variable.names = params,
n.iter = 10000,
)
mod_csim <- as.mcmc(do.call(rbind, mod_sim))
plot(mod_csim, ask = FALSE)
summary(mod_csim)
par(mfrow = c(2, 2))
densplot(mod_csim[,c("z[1]", "z[31]", "z[49]", "z[6]")], ask = FALSE)
library(tidyverse)
library(tidyverse)
library(rjags)
library(COUNT)
# load data
dat <- read.csv("honors.csv")
# load data
dat <- read.csv("callers.csv")
head(dat)
hist(dat$calls, breaks=20)
str(dat)
# Modelo JAGS (similar ao seu exemplo, mas com suas variáveis)
mod_string <- " model {
for (i in 1:length(calls)) {
calls[i] ~ dpois(lam[i])
log(lam[i]) <- int + b_days*days_active[i] + b_group*isgroup2[i] + b_age*age[i]
}
# Priors (distribuições a priori)
int ~ dnorm(0, 1.0/100)       # Intercepto
b_days ~ dnorm(0, 1.0/100)    # Coef. days_active
b_group ~ dnorm(0, 1.0/100)   # Coef. isgroup2
b_age ~ dnorm(0, 1.0/100)     # Coef. age
} "
# Preparar os dados para JAGS
data_jags <- list(
calls = dat$calls,
days_active = dat$days_active,
isgroup2 = dat$isgroup2,
age = dat$age
)
# Inicializar o modelo
mod <- jags.model(
textConnection(mod_string),
data = data_jags,
n.chains = 3  # Número de cadeias MCMC
)
# Amostrar da posterior
update(mod, 1000)  # Burn-in
samples <- coda.samples(
mod,
variable.names = c("int", "b_days", "b_group", "b_age"),
n.iter = 5000
)
# Resumo das estimativas
summary(samples)
mod_sim = coda.samples(model=mod,
variable.names=params,
n.iter=5e3)
# Amostrar da posterior
params <- c("int", "b_days", "b_group", "b_age")
mod_sim = coda.samples(model=mod,
variable.names=params,
n.iter=5e3)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
## convergence diagnostics
plot(mod_sim)
gelman.diag(mod_sim)
autocorr.diag(mod_sim)
autocorr.plot(mod_sim)
effectiveSize(mod_sim)
## compute DIC
dic = dic.samples(mod, n.iter=1e3)
dic
# plotar os resultados
library(bayesplot)
library(ggplot2)
# plotar os resultados
install.packages("bayesplot")
# plotar os resultados
library(bayesplot)
# Plotar os resultados
mcmc_trace(mod_sim, facet_args = list(ncol = 2)) +
ggtitle("Traceplot dos parâmetros do modelo") +
theme_minimal()
# Converter as amostras em matriz
samples_mat <- as.matrix(samples)
head(samples_mat)  # Verifique os parâmetros: int, b_days, b_group, b_age
# Dados do novo cliente
new_age <- 29
new_group <- 1   # Grupo 2 é codificado como 1 (assumindo isgroup2 = 1 para Group 2)
new_days <- 30
# Calcular log(lam) para cada amostra posterior
log_lam_new <- samples_mat[, "int"] +
samples_mat[, "b_days"] * new_days +
samples_mat[, "b_group"] * new_group +
samples_mat[, "b_age"] * new_age
# Calcular lam (inverso do link log)
lam_new <- exp(log_lam_new)
lam_new
set.seed(123)  # Para reprodutibilidade
calls_new <- rpois(n = length(lam_new), lambda = lam_new)
prob_at_least_3 <- mean(calls_new >= 3)
round(prob_at_least_3, 2)  # Arredonde para 2 casas decimais
